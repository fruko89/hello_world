You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    
        ListNode n1 = l1;
        ListNode n2 = l2;
        ListNode newHead = null;
        ListNode n = null;
        int carry = 0;
        
        while (n1 != null && n2 != null) {
            
            int digit = (n1.val + n2.val + carry) % 10;
            carry = (n1.val + n2.val + carry) / 10;
            
            if(newHead == null) {
                 newHead = new ListNode(digit);
                 n = newHead;
            } else {
                n.next = new ListNode(digit);
                n = n.next;
            }
            
            n1 = n1.next;
            n2 = n2.next;
        }
        
        while (n1 != null) {
            
            int digit = (n1.val + carry) % 10;
            carry = (n1.val + carry) / 10;
            
            n.next = new ListNode(digit);
            n = n.next;
            
            n1 = n1.next;
        }
        
        while (n2 != null) {
            
            int digit = (n2.val + carry) % 10;
            carry = (n2.val + carry) / 10;
            
            n.next = new ListNode(digit);
            n = n.next;
            
            n2 = n2.next;
        }
        
        if (carry != 0) {
            n.next = new ListNode(carry);
        }
        
        return newHead;
    }
}
