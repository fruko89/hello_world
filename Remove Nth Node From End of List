Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode node = head;
        int size = 0;
        while(node != null){
            size++;
            node = node.next;
        }
        
        if(size < n){
            return null;
        }
        
        ListNode prev = head;
        node = head;
        for(int i = 0; i < size - n; i++){
            prev = node;
            node = node.next;
        }
        
        if(node == head){
            head = head.next;
        } else{
            prev.next = node.next;
        }
        
        return head;
    }
    
}

class IntWrapper{
    public int count = 0;
}

