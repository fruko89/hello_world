Given a set of distinct integers, S, return all possible subsets.

Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If S = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

public class Solution {
	public List<List<Integer>> subsets(int[] S) {
		List<List<Integer>> subsets = new ArrayList<List<Integer>>();
		ArrayList<Integer> numbers = new ArrayList<Integer>();
		Arrays.sort(S);
		for (int i : S) {
			numbers.add(i);
		}
		ArrayList<Integer> empty = new ArrayList<Integer>();
		subSets(empty, numbers, subsets);
		return subsets;
	}

  private void subSets(List<Integer> empty, List<Integer> numbers, List<List<Integer>> subsets) {

		subsets.add(empty);
		
		for (int i = 0; i < numbers.size(); i++) {
			subSets(append(empty, numbers.get(i)), numbers.subList(i + 1, numbers.size()), subsets);
		}
	}

	private List<Integer> append(List<Integer> l1, Integer e){
		List<Integer> newList = new ArrayList<Integer>();
		newList.addAll(l1);
		newList.add(e);
		return newList;
	}
}
