Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode partition(ListNode head, int x) {
        if (head == null) {
            return head;
        }
        
        ListNode head1 = null;
        ListNode tracker1 = null;
        
        ListNode head2 = null;
        ListNode tracker2 = null;
        
        ListNode n = head;
        while (n != null) {
          ListNode next = n.next;
          n.next = null;
          if(n.val < x) {
              if (head1 == null) {
                  head1 = n;
                  tracker1 = n;
              } else {
                  tracker1.next = n;
                  tracker1 = tracker1.next;
              }
          } else {
              if (head2 == null) {
                  head2 = n;
                  tracker2 = n;
              } else {
                  tracker2.next = n;
                  tracker2 = tracker2.next;
              }
          }
          n = next;
        }
        
        if (head1 == null) {
            return head2;
        } else {
            tracker1.next = head2;
            return head1;
        }
        
    }
}
