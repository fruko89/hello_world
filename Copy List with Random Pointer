A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        
        RandomListNode n = head;
        RandomListNode newHead = null;
        RandomListNode tracker = null;
        
        HashMap<RandomListNode, RandomListNode> randomNodeMap = new HashMap<RandomListNode, RandomListNode>();
        
        while(n != null){
            RandomListNode newNode = new RandomListNode(n.label);
            if(newHead == null){
                newHead = newNode;
                tracker = newHead;
            } else {
                tracker.next = newNode;
                tracker = tracker.next;
            }
            
            randomNodeMap.put(newNode, n.random);
            
            n = n.next;
        }
        
        n = newHead;
        while(n != null){
            RandomListNode oldRandom = randomNodeMap.get(n);
            RandomListNode newRandom = null;
            
            if(oldRandom != null) {
                newRandom = new RandomListNode(oldRandom.label);
            }
            
            n.random = newRandom;
            n = n.next;
        }
        
        return newHead;
    }
}
