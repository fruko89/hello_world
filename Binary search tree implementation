// Binary search implementation: find, insert, delete (2 versions), getHeight

import java.util.ArrayList;
import java.util.List;

public class BinarySearchTree {

	private TreeNode root;
	private int size;

	public BinarySearchTree(TreeNode root) {
		if (root == null) {
			return;
		}
		this.root = root;
		size = 1;
	}

	public void insert(int value) {
		insert(this.root, value);
	}

	private void insert(TreeNode n, int value) {
		if (n == null) {
			n = new TreeNode(value);
			size++;
		} else if (value > n.getValue()) {
			if (n.getRight() == null) {
				n.setRight(new TreeNode(value));
				size++;
			} else {
				insert(n.getRight(), value);
			}
		} else if (value < n.getValue()) {
			if (n.getLeft() == null) {
				n.setLeft(new TreeNode(value));
				size++;
			} else {
				insert(n.getLeft(), value);
			}
		}
	}

	public TreeNode find(int value) {
		return find(this.root, value);
	}

	private TreeNode find(TreeNode n, int value) {
		if (n == null || value == n.getValue()) {
			return n;
		} else if (value > n.getValue()) {
			return find(n.getRight(), value);
		} else {
			return find(n.getLeft(), value);
		}
	}

	public void delete(int value) {
		delete(this.root, value);
	}

	private void delete(TreeNode n, int value) {
		TreeNode m = find(n, value);
		if (m == null) {
			return;
		}

		if (m.getLeft() != null && m.getRight() != null) {
			TreeNode predecessor = getPredecessor(m);
			m.setValue(predecessor.getValue());
			delete(predecessor, predecessor.getValue());
		} else {
			if (m.getParent() == null) {
			    this.root = null;
			} else if (m.getParent().getLeft() == m) {
				m.getParent().setLeft(m.getLeft());
			} else {
				m.getParent().setRight(m.getRight());
			}
			size--;
		}
	}
	
	public void delete2(int value){
		if(size == 1){
			this.root = null;
			size = 0;
			return;
		}
		if(find(value) == null) {
			return;
		}
		this.root.delete(value);
		size--;
	}

	public TreeNode findMax(TreeNode root) {
		if (root == null) {
			return null;
		}
		TreeNode n = root;
		while (n.getRight() != null) {
			n = n.getRight();
		}
		return n;
	}

	public TreeNode findMin(TreeNode root) {
		if (root == null) {
			return null;
		}
		TreeNode n = root;
		while (n.getLeft() != null) {
			n = n.getLeft();
		}
		return n;
	}

	public TreeNode getSuccessor(TreeNode n) {
		if (n == null) {
			return n;
		}
		return findMin(n.getRight());
	}

	public TreeNode getPredecessor(TreeNode n) {
		if (n == null) {
			return n;
		}
		return findMax(n.getLeft());
	}

	public TreeNode getRoot() {
		return root;
	}

	public int getSize() {
		return size;
	}

	public int getMinHeight() {
		
		return (size != 0) ? (int) (Math.log(size) / Math.log(2)) + 1 : size;
	}
	
	public int getHeight(){	
		return maxValue(getHeights());	
	}
	
	private int maxValue(List<Integer> heights) {
		if(heights == null || heights.size() == 0){
			throw new IllegalStateException();
		}
		
		int max = Integer.MIN_VALUE;
		for(Integer i : heights){
			if(i > max){
				max = i;
			}
		}
		return max;
	}
	
	private List<Integer> getHeights() {
		List<Integer> heights = new ArrayList<Integer>();
		preOrderTraverse(this.root, heights);
		return heights;	
	}
	
	public String toString() {
		StringBuffer s = new StringBuffer();
		inOrderTraverse(this.root, s);
		return s.toString();
	}
	
	private void preOrderTraverse(TreeNode n, List<Integer> heights) {
		if (n == null) {
			return;
		}
		if (n.isLeaf()) { 
			heights.add(n.getHeight());
		}
		preOrderTraverse(n.getLeft(), heights);
		preOrderTraverse(n.getRight(), heights);
	}

	private void inOrderTraverse(TreeNode n, StringBuffer s) {
		if (n == null) {
			return;
		}

		inOrderTraverse(n.getLeft(), s);
		s.append(n + " ");
		inOrderTraverse(n.getRight(), s);
	}

	public static void main(String[] args) {
		TreeNode root = new TreeNode(8);
		BinarySearchTree bst = new BinarySearchTree(root);
		bst.insert(1);
		bst.insert(6);
		bst.insert(4);
		bst.insert(7);
		bst.insert(14);
		bst.insert(13);
		bst.delete2(4);
		bst.delete2(7);
		bst.delete2(8);
		bst.delete(13);
		System.out.println(bst);
		
		System.out.println(bst.find(14));
		System.out.println(bst.getSize());
		System.out.println(bst.getHeight());
		System.out.println(bst.getMinHeight());
	}
}

class TreeNode {

	private int value;
	private TreeNode left;
	private TreeNode right;
	private TreeNode parent;
	private List<TreeNode> adjacents;
	private boolean isVisited;

	public TreeNode(int value) {
		this.value = value;
		this.adjacents = new ArrayList<TreeNode>();
		isVisited = false;
	}

	public void setLeft(TreeNode left) {

		this.left = left;
		if (left != null) {
			left.parent = this;
			this.adjacents.add(left);
		}

	}

	public void setRight(TreeNode right) {

		this.right = right;
		if (right != null) {
			right.parent = this;
			this.adjacents.add(right);
		}
	}

	public TreeNode getLeft() {
		return this.left;
	}

	public TreeNode getRight() {
		return this.right;
	}

	public TreeNode getParent() {
		return this.parent;
	}

	public void setParent(TreeNode parent) {
		this.parent = parent;
	}

	public void setValue(int value) {
		this.value = value;
	}

	public int getValue() {
		return this.value;
	}

	public List<TreeNode> getAdjacents() {
		return this.adjacents;
	}

	public boolean isVisited() {
		return this.isVisited;
	}

	public void setVisited(boolean visited) {
		this.isVisited = visited;
	}
	
	public boolean isLeaf() {
		return this.getLeft() == null && this.getRight() == null;
	}
	
	public int getHeight(){
		TreeNode n = this;
		int height = 1;
		while(n.getParent() != null) {
			height++;
			n = n.getParent();
		}
		return height;
	}
	
	public String toString() {
		return String.valueOf(value);
	}

	private TreeNode getMin() {
		TreeNode n = this;
		while (n.getLeft() != null) {
			n = n.getLeft();
		}
		return n;
	}

	private void giveParentTo(TreeNode n) {
		if (this.getParent() != null) {
			if (this.getParent().getLeft() == this) {
				this.getParent().setLeft(n);
			} else {
				this.getParent().setRight(n);
			}
		} 
		if (n != null) {
			n.setParent(this.getParent());
		}
	}

	public void delete(int val) {
		if (val > this.getValue() && this.getRight() != null) {
			this.getRight().delete(val);
		} else if (val < this.getValue() && this.getLeft() != null) {
			this.getLeft().delete(val);
		} else if (val == this.getValue()) {
			if (this.getLeft() != null && this.getRight() != null) {
				TreeNode successor = this.getRight().getMin();
				this.setValue(successor.getValue());
				successor.delete(successor.getValue());
			} else if (this.getLeft() != null) {
				this.giveParentTo(this.getLeft());
			} else if (this.getRight() != null) {
				this.giveParentTo(this.getRight());
			} else {
				this.giveParentTo(null);
			}
		}
	}
}
