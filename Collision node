// Find the collision node of a circular linked list

import java.util.HashSet;
import java.util.Set;

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        
        if(head == null){
            return null;
        }
        
        ListNode slow = head;
        ListNode fast = head;
    
        while(fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast || fast == null){
                break;
            }
        }
        
        if(fast == null || fast.next == null){
            return null;
        }
        
        slow = head;
        
        while(slow != fast){
            slow = slow.next;
            fast = fast.next;
        }
        
        return fast;
        
        
        // HashSet<ListNode> nodes = new HashSet<ListNode>();
        // ListNode n = head;
        
        // while(n != null && !nodes.contains(n)){
        //     nodes.add(n);
        //     n = n.next;
        // }
        
        // return n;
    }
}
