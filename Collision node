// Find the collision node of a circular linked list

import java.util.HashSet;
import java.util.Set;

public class question16 {

	public static Node getCollisionPoint(Node head)
	{
		Node slow = head;
		Node fast = head;
		
		while(slow != null && fast.next != null){
			slow = slow.next;
			fast = fast.next.next;
			if(slow == fast){
				break;
			}
		}
		
		if(slow == null && fast == null){
			return null;
		}
		
		slow = head;
		while(slow != fast){
			slow = slow.next;
			fast = fast.next;
		}
		
		return slow;
	}
	
	public static Node getCollisionPoint2(Node head)
	{		
		Node n = head;
		Set<Node> nodes = new HashSet<Node>();
		
		while (n != null){
			if(!nodes.contains(n)){
				nodes.add(n);
			}
			else{
				return n;
			}
			n = n.next;
		}
		
		return null;
	}
	
	public static void main(String[] args) {
		
		LinkedList list = new LinkedList();
		list.add(0);
		list.add(1);
		list.add(2);
		list.add(3);
		list.add(4);
		list.add(5);
		list.add(6);
		list.add(7);
		list.add(8);
		list.add(9);
		list.add(10);
		list.add(11);
		list.get(11).next = list.get(4);
		
		System.out.print(list.get(4) == getCollisionPoint2(list.head));
	}
}
