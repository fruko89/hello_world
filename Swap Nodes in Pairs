Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        
        if (head == null || head.next == null) {
            return head;
        }
        
        ListNode currentPairFirst = head;
        ListNode currentPairNext = head.next;
        ListNode nextPairFirst = null;
        ListNode nextPairNext = null;
        
        ListNode newHead = null;
        
        while (currentPairFirst != null && currentPairNext != null) {
            
            nextPairFirst = currentPairNext.next;
            currentPairNext.next = currentPairFirst;
            
            if (newHead == null) {
                newHead = currentPairNext;
            }
            
            if (nextPairFirst != null) {
                nextPairNext = nextPairFirst.next;
                currentPairFirst.next = (nextPairNext != null) ? nextPairNext : nextPairFirst;
            } else {
                nextPairNext = null;
                currentPairFirst.next = null;
            }
         
            currentPairFirst = nextPairFirst;
            currentPairNext = nextPairNext;
        }
        
        return newHead;
    }
}
