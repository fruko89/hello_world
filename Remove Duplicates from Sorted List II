Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        
        HashMap<Integer, Integer> valueToCountMap = new HashMap<Integer, Integer>();
        ListNode n = head;
        while (n != null) {
            if(!valueToCountMap.containsKey(n.val)){
                valueToCountMap.put(n.val, 1);
            } else {
                valueToCountMap.put(n.val, valueToCountMap.get(n.val) + 1);
            }
            
            n = n.next;
        }
        
        n = head;
        ListNode prev = null;
        while (n != null) { 
            if (valueToCountMap.get(n.val) > 1) {
                if(prev == null){
                    head = n.next;
                } else {
                    prev.next = n.next;
                }
            } else {
                prev = n;
            }
            n = n.next;
        }
        
        return head;
    }
}
