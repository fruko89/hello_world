Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    public boolean hasPathSum(TreeNode root, int sum) {
        return hasPathSum(root, sum, root == null ? -1 : root.val);
    }
    
    private boolean hasPathSum(TreeNode root, int sum, int soFar) {
        
        if (root == null) {
            return false;
        }

        if (soFar == sum && isLeaf(root)) {
            return true;
        } 
        
        boolean hasSumLeft = hasPathSum(root.left, sum, root.left == null ? -1 : soFar + root.left.val);
        boolean hasSumRight = hasPathSum(root.right, sum, root.right == null ? -1 : soFar + root.right.val);
        return hasSumLeft || hasSumRight;
    }

    boolean isLeaf(TreeNode node){
        return node.left == null && node.right == null;
    }
}
