// Given a collection of numbers, return all possible permutations.

// For example,
// [1,2,3] have the following permutations:
// [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].


public class Solution {
    public List<List<Integer>> permute(int[] num) {
        List<List<Integer>> perms = new ArrayList<List<Integer>>();
        List<Integer> start = new ArrayList<Integer>();
        for(int i : num) { start.add(i); }
        List<Integer> empty = new ArrayList<Integer>();
        
        permutations(empty, start, perms);
        
        return perms;
    }
    
    private void permutations(List<Integer> empty, List<Integer> start, List<List<Integer>> perms) {
        
        if(start.size() == 0){
            perms.add(empty);
            return;
        }
        
        for(int i = 0; i < start.size(); i++) {
            permutations(mergedList(empty, start.subList(i, i + 1)), 
                         mergedList(start.subList(0, i), start.subList(i + 1, start.size())), 
                         perms);
        }
    }
    
    private List<Integer> mergedList(List<Integer> list1, List<Integer> list2){
        if(list1 == null && list2 == null){
            return null;
        } else if(list1 == null){
            return list2;
        } else if(list2 == null){
            return list1;
        }
        
        List<Integer> mergedList = new ArrayList<Integer>();
        mergedList.addAll(list1);
        mergedList.addAll(list2);
        
        return mergedList;
    }
}
