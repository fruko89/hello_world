Find the contiguous subarray within an array (containing at least one number) which has the largest product.

For example, given the array [2,3,-2,4],
the contiguous subarray [2,3] has the largest product = 6.

public class Solution {
    public int maxProduct(int[] A) {
        if (A == null || A.length == 0) {
            return Integer.MIN_VALUE;
        }
        if (A.length == 1) {
            return A[0];
        }
        
        int localMax = A[0];
        int localMin = A[0];
        int globalMax = A[0];
        
        for (int i = 1; i < A.length; i++) {
            int copyLocalMax = localMax;
            localMax = Math.max(Math.max(A[i] * localMax, A[i]), A[i] * localMin);
            localMin = Math.min(Math.min(A[i] * copyLocalMax, A[i]), A[i] * localMin);
            globalMax = Math.max(localMax, globalMax);
        }
        
        return globalMax;
    }
    
    // public int maxProduct(int[] A) {
    //     int maxProd = Integer.MIN_VALUE;
        
    //     for(int n = 0; n < A.length; n++){
    //         for(int i = 0; i < A.length - n; i++){
    //             int prod = getProduct(i, i + n, A);
    //             if(prod > maxProd){
    //                 maxProd = prod;
    //             }
    //         }
    //     }
        
    //     return maxProd;
    // }
    
    // private int getProduct(int startIndex, int endIndex, int[] A) {
    //     int prod = 1;
    //     for(int i = startIndex; i <= endIndex; i++){
    //         prod*=A[i];
    //     }
    //     return prod;
    // }
}
