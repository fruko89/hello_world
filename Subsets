// Given a collection of integers that might contain duplicates, S, return all possible subsets.

//Note:
//Elements in a subset must be in non-descending order.
//The solution set must not contain duplicate subsets.
//For example,
//If S = [1,2,2], a solution is:
//
//[
//  [2],
//  [1],
//  [1,2,2],
//  [2,2],
//  [1,2],
//  []
//]

public class Solution {
	public List<List<Integer>> subsetsWithDup(int[] num) {
		List<List<Integer>> subsets = new ArrayList<List<Integer>>();
		ArrayList<Integer> numbers = new ArrayList<Integer>();
		Arrays.sort(num);
		for (int i : num) {
			numbers.add(i);
		}
		ArrayList<Integer> empty = new ArrayList<Integer>();
		subSets(empty, numbers, subsets);
		return subsets;
	}

	private void subSets(List<Integer> empty, List<Integer> numbers, List<List<Integer>> subsets) {

		if (!subsets.contains(empty)) {
			subsets.add(empty);
		}
		
		for (int i = 0; i < numbers.size(); i++) {
			subSets(append(empty, numbers.get(i)), numbers.subList(i + 1, numbers.size()), subsets);
		}
	}

	private List<Integer> append(List<Integer> l1, Integer e){
		List<Integer> newList = new ArrayList<Integer>();
		newList.addAll(l1);
		newList.add(e);
		return newList;
	}
}
