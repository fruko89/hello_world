public class Solution {
    public boolean isValidSudoku(char[][] board) {
        
        ArrayList<Integer> visited = new ArrayList<Integer>();
        
        for (int i = 0; i < board.length; i++) {
            visited.clear();
            for (int j = 0; j < board[0].length; j++) {
                if (!isValid(board[i][j], visited)) {
                    return false;
                }
            }
        }
        
        for (int i = 0; i < board.length; i++) {
            visited.clear();
            for (int j = 0; j < board[0].length; j++) {
                if (!isValid(board[j][i], visited)) {
                    return false;
                }
            }
        }
        
        for (int i = 0; i < board.length; i+=3) {
            for (int j = 0; j < board[0].length; j+=3) {
                visited.clear();
                for (int k = i; k < i + 3; k++) {
                    for (int m = j; m < j + 3; m++) {
                        if (!isValid(board[k][m], visited)){
                            return false;
                        }
                    }
                }
            }
        }
        
        return true;
    }
    
    private boolean isValid(char cellChar, ArrayList<Integer> visited) {
        if (cellChar == '.') {
            return true;
        }
        
        int numValue = Character.getNumericValue(cellChar);
        if (numValue < 1 || numValue > 9 || visited.contains(numValue)) {
            return false;
        }
        visited.add(numValue);
        return true;
    }
}
