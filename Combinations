Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        
        List<List<Integer>> combins = new ArrayList<List<Integer>>();
        List<Integer> end = new ArrayList<Integer>();
        for(int i = 1; i <= n; i++){
            end.add(i);
        }
        List<Integer> start = new ArrayList<Integer>();
        
        combine(start, end, k, combins);
        return combins;
    }
    
    private void combine(List<Integer> start, List<Integer> end, int k, List<List<Integer>> combins) {
        
        if(start.size() == k){
            combins.add(start);
            return;
        }
        
        for(int i = 0; i < end.size(); i++) {
            combine(addLists(start, end.get(i)), end.subList(i+1, end.size()), k, combins);
        }
    }
    
    private List<Integer> addLists(List<Integer> list, Integer i){
        List<Integer> newList = new ArrayList<Integer>();
        newList.addAll(list);
        newList.add(i);
        return newList;
    }
}
