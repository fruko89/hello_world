Given a string, find the length of the longest substring without repeating characters. For example, the longest substring without repeating letters for "abcabcbb" is "abc", which the length is 3. For "bbbbb" the longest substring is "b", with the length of 1.

public class Solution {
    
    public int lengthOfLongestSubstring(String s) {
        
        HashSet<Character> visited = new HashSet<Character>();
        
        char[] charArr = s.toCharArray();
        int maxLen = 0;
        int lastBeginIndex = 0;
        int i = 0;
        for (i = 0 ; i < charArr.length; i++) {
            char currentChar = charArr[i];
            
            if (visited.contains(currentChar)){
                maxLen = Math.max(maxLen, i - lastBeginIndex);
                
                for (int j = lastBeginIndex; j < i; j++) {
                    if (charArr[j] == currentChar) {
                        lastBeginIndex = j + 1;
                        break;
                    }
                    visited.remove(charArr[j]);
                }
                
            } else {
                visited.add(currentChar);
            }
        }
        
        return Math.max(maxLen, i - lastBeginIndex);
    }
    
    
    
    // public int lengthOfLongestSubstring(String s) {
        
    //     HashMap<Character, Integer> uniqueChars = new HashMap<Character, Integer>();
        
    //     char[] charArr = s.toCharArray();
    //     int max = 0;
    //     int count = 0;
    //     for (int i = 0; i < charArr.length; i++) {
    //         if (uniqueChars.containsKey(charArr[i])) {
    //             if (i - uniqueChars.get(charArr[i]) > 1) {
    //                 i = uniqueChars.get(charArr[i]) + 1;
    //             }
    //             max = Math.max(count, max);
    //             uniqueChars.clear();
    //             count = 1;
    //         } else {
    //             count++;
    //         }
            
    //         uniqueChars.put(charArr[i], i);
    //     }
    //     max = Math.max(count, max);
    //     return max;
    // }
}
